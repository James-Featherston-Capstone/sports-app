// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int            @id @default(autoincrement())
  username           String
  email              String
  password           String
  profile_image_url  String         @default("")
  bio                String         @default("")
  location           String         @default("")
  latitude           Decimal        @default(0.0)
  longitude          Decimal        @default(0.0)
  latitudeKey        Int            @default(0)
  longitudeKey       Int            @default(0)
  sports             Sports[]       @default([])
  created_at         DateTime       @default(now())
  updated_at         DateTime       @default(now())
  eventsCreated      Event[]
  eventsRSVP         EventRSVP[]
  comments           EventComment[]
  friendshipSent     Friendship[]   @relation("UserToFriend")
  friendshipReceived Friendship[]   @relation("FriendToUser")

  @@index([latitudeKey, longitudeKey])
}

model Friendship {
  id         Int      @id @default(autoincrement())
  user       User     @relation("UserToFriend", fields: [userId], references: [id])
  userId     Int
  friend     User     @relation("FriendToUser", fields: [friendId], references: [id])
  friendId   Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Event {
  id           Int            @id @default(autoincrement())
  organizer    User           @relation(fields: [organizerId], references: [id])
  organizerId  Int
  eventImage   String         @default("")
  sport        String         @default("")
  description  String         @default("")
  eventTime    DateTime
  location     String
  latitude     Decimal
  longitude    Decimal
  latitudeKey  Int
  longitudeKey Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  rsvps        EventRSVP[]
  comments     EventComment[]

  @@index([latitudeKey, longitudeKey])
}

model EventRSVP {
  id         Int      @id @default(autoincrement())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@unique([eventId, userId])
}

model EventComment {
  id         Int      @id @default(autoincrement())
  comment    String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  Event      Event    @relation(fields: [eventId], references: [id])
  eventId    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum Sports {
  FOOTBALL
  SOCCER
  BASKETBALL
  BASEBALL
  TENNIS
  PICKLEBALL
  SOFTBALL
  RACQUETBALL
  FRISBEE
  VOLLEYBALL
  GOLF
  HOCKEY
  NONE
}
