// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  username           String              @unique
  email              String
  password           String
  profile_image_url  String              @default("")
  bio                String
  location           String
  latitude           Decimal
  longitude          Decimal
  latitudeKey        Int
  longitudeKey       Int
  sports             Sports[]            @default([])
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now())
  eventsCreated      Event[]
  eventsRSVP         EventRSVP[]
  comments           EventComment[]
  friendshipSent     Friendship[]        @relation("UserToFriend")
  friendshipReceived Friendship[]        @relation("FriendToUser")
  clickedEvents      ClickedEvent[]
  recommendationData RecommendationData?
  EventInvite        EventInvite[]

  @@index([latitudeKey, longitudeKey])
}

model RecommendationData {
  id               Int     @id @default(autoincrement())
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int     @unique
  timeOfDayBuckets Json
  timeOfDayCount   Decimal @default(0)
  timeOfDayWeight  Decimal @default(0.15)
  sportBuckets     Json
  sportCount       Decimal @default(0)
  sportWeight      Decimal @default(0.35)
  dateCount        Decimal @default(0)
  dateWeight       Decimal @default(0.5)
}

model Friendship {
  id         Int      @id @default(autoincrement())
  user       User     @relation("UserToFriend", fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  friend     User     @relation("FriendToUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId   Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Event {
  id           Int                   @id @default(autoincrement())
  organizer    User                  @relation(fields: [organizerId], references: [id])
  organizerId  Int
  eventImage   String                @default("")
  sport        String                @default("")
  description  String                @default("")
  eventTime    DateTime
  location     String
  latitude     Decimal
  longitude    Decimal
  latitudeKey  Int
  longitudeKey Int
  created_at   DateTime              @default(now())
  updated_at   DateTime              @default(now())
  rsvps        EventRSVP[]
  comments     EventComment[]
  preferences  EventParkPreference[]
  clicks       ClickedEvent[]
  EventInvite  EventInvite[]

  @@index([latitudeKey, longitudeKey])
}

model EventInvite {
  id        Int   @id @default(autoincrement())
  invitedId Int
  invited   User  @relation(fields: [invitedId], references: [id], onDelete: Cascade)
  eventId   Int
  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model ClickedEvent {
  id            Int      @id @default(autoincrement())
  eventDistance Decimal
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       Int
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model EventParkPreference {
  id         Int      @id @default(autoincrement())
  location   String
  latitude   Decimal
  longitude  Decimal
  upvotes    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Event      Event    @relation(fields: [eventId], references: [id])
  eventId    Int
}

model EventRSVP {
  id         Int      @id @default(autoincrement())
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@unique([eventId, userId])
}

model EventComment {
  id         Int      @id @default(autoincrement())
  comment    String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int
  Event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum Sports {
  FOOTBALL
  SOCCER
  BASKETBALL
  BASEBALL
  TENNIS
  PICKLEBALL
  SOFTBALL
  RACQUETBALL
  FRISBEE
  VOLLEYBALL
  GOLF
  HOCKEY
  NONE
}
